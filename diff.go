// Copyright (c) 2024 ENRICO RUBBOLI - enrico@rbblab.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package main

import (
	"encoding/csv"
	"fmt"
	"os"
	"sort"
	"strconv"
)

type Account struct {
	Address string
	Amount  float64
}

/* compare 2 csv generated by snapshot.go */

func main() {
	if len(os.Args) != 3 {
		fmt.Println("Usage: go run program.go <file1.csv> <file2.csv>")
		os.Exit(1)
	}

	file1 := os.Args[1]
	file2 := os.Args[2]

	accounts1 := readAccounts(file1)
	accounts2 := readAccounts(file2)

	added, removed, changed := compareAccounts(accounts1, accounts2)

	fmt.Println("Added addresses:")
	for _, acc := range added {
		fmt.Printf("%s: %.8f\n", acc.Address, acc.Amount)
	}

	fmt.Println("\nRemoved addresses:")
	for _, acc := range removed {
		fmt.Printf("%s: %.8f\n", acc.Address, acc.Amount)
	}

	fmt.Println("\nChanged balances:")
	for _, change := range changed {
		fmt.Printf("%s: %.8f -> %.8f\n", change.Address, accounts1[change.Address].Amount, accounts2[change.Address].Amount)
	}
}

func readAccounts(filename string) map[string]Account {
	file, err := os.Open(filename)
	if err != nil {
		fmt.Printf("Error opening file %s: %v\n", filename, err)
		os.Exit(1)
	}
	defer file.Close()

	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		fmt.Printf("Error reading CSV: %v\n", err)
		os.Exit(1)
	}

	accounts := make(map[string]Account)
	for i, record := range records {
		if i == 0 { // Skip header
			continue
		}
		amount, err := strconv.ParseFloat(record[2], 64)
		if err != nil {
			fmt.Printf("Error parsing amount for address %s: %v\n", record[1], err)
			continue
		}
		accounts[record[1]] = Account{Address: record[1], Amount: amount}
	}

	return accounts
}

func compareAccounts(accounts1, accounts2 map[string]Account) ([]Account, []Account, []Account) {
	var added, removed, changed []Account
	var keys []string

	// Collect all keys from both maps
	for k := range accounts1 {
		keys = append(keys, k)
	}
	for k := range accounts2 {
		if _, exists := accounts1[k]; !exists {
			keys = append(keys, k)
		}
	}

	// Sort the keys
	sort.Strings(keys)

	// Use sorted keys to populate the result slices
	for _, addr := range keys {
		acc1, exists1 := accounts1[addr]
		acc2, exists2 := accounts2[addr]

		if !exists1 && exists2 {
			added = append(added, acc2)
		} else if exists1 && !exists2 {
			removed = append(removed, acc1)
		} else if exists1 && exists2 && acc1.Amount != acc2.Amount {
			changed = append(changed, acc2)
		}
	}

	return added, removed, changed
}
